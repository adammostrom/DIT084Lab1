Task 1:
Here are 3 tests that we ran that prove that the program is faulty, and their expected results:

1)
input: 
10 8 10 6
     
output:                                                                                                                                                                                    
The difference in days between 10/8 and 10/6 is:
-309

expected:
363


2)
input: 
2 5 2 7 
     
output:                                                                                                                    

The difference in days between 2/5 and 2/7 is:
-60

expected:
2


3)
input: 
10 5 10 7 
     
output:                                                                                                                    The difference in days between 10/5 and 10/7 is:
-305

expected:
2



Task 2:
Variables found within main:
	args
	someMonth
	someDay
	laterMonth
	laterDay
	someDayInYear
	laterDayInYear
	aMonth
	daysBetween

	
Task 3:
	The method is called `daysInMonth`, and it is found in `main` on lines 35 and 39


Task 4:
Here are the bugs that we discovered with the code:

On line 38, `amonth` is not set to 0 in the initializer of the loop, when it should be

On line 16, the else statement causes February to be considered as having 31 days. There should be an else if statement that checks if the month is february, and returns 28 if it is.

On line 48,49, In the final calculation before showing the correct amount of days, the code does not take into account when the “daysBetween” becomes negative.

On line 24-28, the code does not check for inputs that are invalid, such as negative values or month value that is larger than 12, nor day value larger than 31.

On line 24-28, the code does not take into account that the user will assume “1” to represent january, but since the indexing in the code starts from 0, there is a shift in which month the user intends to put in and which month is actually calculated.


